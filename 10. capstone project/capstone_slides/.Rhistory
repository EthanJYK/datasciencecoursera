list3 <- which(dt3$V2 %in% names)
for(i in list3){dt3$V2[i] <- firstup(dt3$V2[i])}
list2 <- which(dt2$V2 %in% names)
for(i in list2){dt2$V2[i] <- firstup(dt2$V2[i])}
list1 <- which(dt1$V2 %in% names)
for(i in list1){dt1$V2[i] <- firstup(dt1$V2[i])}
lists <- which(dts$V2 %in% names)
for(i in lists){dts$V2[i] <- firstup(dts$V2[i])}
list4 <- which(dt4$V2 %in% names)
for(i in list4){dt4$V2[i] <- firstup(dt4$V2[i])}
rm(list1, list2, list3, list4, list5, lists)
View(dt4)
rm(d)
rm(i)
rm(n)
rm(niname)
rm(noname)
View(dt3)
View(dt1)
save.image("C:/R works/capstone_data_final.RData")
runApp('capstone')
# rc$V2[1:5] # test
unique(na.omit(c(dt5[x5, on="V1"]$V2[1:5],
dt4[x4, on="V1"]$V2[1:5],
rc$V2[1:5],
dt3[x3, on="V1"][order(-KN)]$V2[1:5],
dt2[x2, on="V1"]$V2[1:5]))
)[1:5]
runApp('capstone')
dts[V1 == "offense"]
dts[V1 == "still"]
dts[V1 == "still" & V2 == "defense"]
names <- c(names, "argentine")
names <- c(names, "danish")
names <- c(names, "belgian")
names <- c(names, "portugese")
names <- c(names, "african")
names <- c(names, "asian")
names <- c(names, "croatian")
names <- c(names, "mongolian")
names <- c(names, "indonesian")
names <- c(names, "vietnamese")
load("C:/R works/capstone_data_final.RData")
dts[V1 == "still" & V2 == "defense"]
mean(dts[V1 == "still"]$P)
mean(dts[V1 == "still"]$P) * 2/3
mean(dts[V1 == "still"]$P) * 3/5
mean(dts[V1 == "still"]$P) * 4/7
mean(dts[V1 == "still"]$P) * 5/8
mean(dts[V1 == "still"]$P) * 5/9
dt3[V1 == "but the" $ V2 == "defense"]
dt3[V1 == "but the" & V2 == "defense"]
mean(dt3[V1 == "but the"]$V2)
mean(dt3[V1 == "but the"]$KN)
dt4[V1 == "to settle the"]
filter()
t <- dt4[1:100]
View(t)
t2 <- group_by(t, V1) %>% slice(1:5) %>% as.data.table
View(t2)
t2 <- group_by(t, V1) %>% slice(1:4) %>% as.data.table
t2 <- group_by(t, V1) %>% slice(1:3) %>% as.data.table
View(t2)
object.size(dt2)
View(dt2)
object.size(dt5)
View(dt5)
View(dt5)
dt5[V1 == "and a case of"]
dt5a <- dt5[P >= 0.25]
dt5 <- dt5[P >= 0.25]
rm(dt5a)
View(dt4)
setorder(dt4, V1, -P)
View(dt3)
View(dts)
setorder(dt3, V1, -KN)
setorder(dts, V1, -P)
dt4[V1 == "helps reduce your"]
dt3[V1 == "reduce your"]
mean(dt3[V1 == "reduce your"]$KN)
mean(dt3[V1 == "reduce your"]$KN) * 0.5
mean(dt3[V1 == "reduce your"]$KN) * 0.6
mean(dt3[V1 == "reduce your"]$KN) * 0.5
mean(dt3[V1 == "reduce your"]$KN) * 0.25
mean(dt3[V1 == "reduce your"]$KN) * 0.3
mean(dt3[V1 == "reduce your"]$KN) * 0.4
dt5[V1 == "time to take a"]
dt4[V1 == "to take a"]
setorder(dt3, V1, -KN)
setorder(dts, V1, -P)
# dt5
dt5 <- dt5[P >= 0.25]
# dt4 - count 5?
dt4 <- group_by(dt4, V1) %>% slice(1:5) %>% as.data.table
# dt3 mean
dt3 <- group_by(dt3, V1) %>% filter(KN >= mean(KN) * 0.4) %>% as.data.table
# dts mean * 5/9
dts <- group_by(dts, V1) %>% filter(P >= (mean(P) * 5/9)) %>% as.data.table
# dt2
dt2a <- group_by(dt2, V1) %>% filter(KN >= (mean(KN) * 0.75)) %>% as.data.table
dt2b <- group_by(dt2, V1) %>% filter(KN >= median(KN)) %>% as.data.table
setorder(dt3, V1, V2)
setorder(dts, V1, V2)
object.size(dts)
object.size(dt5)
object.size(dt4)
object.size(dt3)
object.size(dt2)
object.size(dt1)
View(dt4)
dt4 <- dt4[-c(1:393)]
View(dt4)
dt4 <- dt4[-c(1:43)]
View(dt4)
dt4 <- group_by(dt4, V1) %>% slice(1:4) %>% as.data.table
object.size(dt4)
object.size(dt3)
t <- dt3[V1 == "but the"]
View(t)
setorder(dt3, V1, -KN)
t <- dt3[V1 == "but the"]
View(t)
dt3[V1 == "but the" & V2 == "defense"]
dt3 <- group_by(dt3, V1) %>% slice(1:380) %>% as.data.table
object.size(dt3)
dt3 <- dt3[KN >= 0.0005]
dt3 <- dt3[KN >= 0.0006]
dts[V1 == "still" & V2 == "defense"]
dts[V1 == "still"]
setorder(dts, V1, -P)
t <- dts[V1 == "still"]
View(t)
View(dts)
dts <- group_by(dts, V1) %>% slice(1:1285) %>% as.data.table
object.size(dts)
dts <- dts[P > 0.00016]
object.size(dts)
setorder(dt3, V1, V2)
setorder(dts, V1, V2)
t <- dts[V1 == "offense"]$V2 %in% dts[V1 == "still"]$V2
t <- dts[dts[V1 == "offense"]$V2 %in% dts[V1 == "still"]$V2]
t <- dts[which(dts[V1 == "offense"]$V2 %in% dts[V1 == "still"]$V2)]
View(t)
t <- dts[V1 == "offense"][which(dts[V1 == "offense"]$V2 %in% dts[V1 == "still"]$V2)]
View(t)
setorder(t, -P)
View(t)
setorder(t, V!, V2)
setorder(t, V1, V2)
t2 <- t[V2 %in% dt3[V1 == "but the"]$V2]
View(t2)
setorcer(t2, -P)
setorder(t2, -P)
View(t2)
View(t)
t3 <- t[V2 %in% dt2[V1 == "the"]$V2]
View(t3)
setorder(t3, -P)
setorder(t, -P)
View(t)
View(t2)
View(t3)
object.size(dt3)
object.size(dt4)
View(dt4)
setorder(dt3, V1, V2)
setorder(dts, V1, V2)
d <- c(read_lines("dictionary_base.txt"),
names)
t <- unlist(lapply(dt4$V1, function(x){strsplit(x, " ")}))
t0 <- t %in% d
t1 <- as.data.table(matrix(t, length(t)/3, 3, byrow = TRUE))
t2 <- rowSums(t1)
View(t1)
t1 <- as.data.table(matrix(t0, length(t)/3, 3, byrow = TRUE))
t2 <- rowSums(t1)
min(t2)
dt4a <- dt4[t2 == 4]
View(dt4a)
max(t2)
dt4a <- dt4[t2 == 3]
View(dt4a)
t3 <- dt4a$V2 %in% d
dt4b <- dt4a[t3 == TRUE]
dt4 <- dt4b
rm(d, dt4a, dt4b, t0, t1, t2, t3)
object.size(dt4)
object.size(dt3)
# capitalize names
list5 <- which(dt5$V2 %in% names)
for(i in list5){dt5$V2[i] <- firstup(dt5$V2[i])}
list4 <- which(dt4$V2 %in% names)
for(i in list4){dt4$V2[i] <- firstup(dt4$V2[i])}
list3 <- which(dt3$V2 %in% names)
for(i in list3){dt3$V2[i] <- firstup(dt3$V2[i])}
list2 <- which(dt2$V2 %in% names)
for(i in list2){dt2$V2[i] <- firstup(dt2$V2[i])}
list1 <- which(dt1$V2 %in% names)
for(i in list1){dt1$V2[i] <- firstup(dt1$V2[i])}
lists <- which(dts$V2 %in% names)
for(i in lists){dts$V2[i] <- firstup(dts$V2[i])}
rm(list1, list2, list3, list4, list5, lists)
View(dts)
object.size(dts)
object.size(dt4)
d <- c(read_lines("dictionary_base.txt"),
names)
dt4a <- dt4[V1 %in% d]
dt4a <- dt4[V1 %in% d]
head(d)
dts <- dts[V1 %in% d]
rm(dt4a)
rm(i)
View(dts)
View(dt2)
length())unique(dt2a$V1)
length(unique(dt2a$V1))
length(unique(dt2b$V1))
length(unique(dt2$V1))
View(dt2a)
dt2 <- dt2a
rm(dt2b, dt3)
rm(dt2a)
save.image("C:/R works/t.RData")
load("C:/R works/capstone_data_final.RData")
dt3 <- write.csv("dt3.csv")
load("C:/R works/capstone_data_final.RData")
write.csv(dt3, "dt3.csv")
load("C:/R works/t.RData")
object.size(dt4)
object.size(dt5)
object.size(dts)
object.size(dt2)
object.size(dt3)
setorder(dt3, V1, -KN)
# dt3 mean
dt3 <- group_by(dt3, V1) %>% filter(KN >= mean(KN) * 0.4) %>% as.data.table
dt3 <- group_by(dt3, V1) %>% slice(1:380) %>% as.data.table
dt3 <- dt3[KN >= 0.0006]
setorder(dt3, V1, V2)
object.size(dt3)
for(i in list3){dt3$V2[i] <- firstup(dt3$V2[i])}
list2 <- which(dt2$V2 %in% names)
list3 <- which(dt3$V2 %in% names)
for(i in list3){dt3$V2[i] <- firstup(dt3$V2[i])}
rm(list2, list3)
rm(i)
rm(t, d)
rm(names)
runApp('capstone')
save.image("C:/R works/t.RData")
runApp('capstone')
dts[V1 == "offense"]$V2 %in% dt3[V1 == "but the"]$V2
t <- dts[V1 == "offense"]$V2 %in% dt3[V1 == "but the"]$V2
t
t <- dts[V1 == "offense][which(dts[V1 == "offense"]$V2 %in% dt3[V1 == "but the"]$V2)]
t <- dts[V1 == "offense"][which(dts[V1 == "offense"]$V2 %in% dt3[V1 == "but the"]$V2)]
View(t)
setorder(t, -P)
View(t)
runApp('capstone')
runApp('capstone')
runApp('capstone')
View(dt1)
head(wordpool)
dt1 <- dt1[-c(1:12, 14, 17:24, 26:37, 39:48, 50:57, 59, 60, 61, 63, 64, 66:69, 74:77, 80:98)]
View(dt1)
dt1 <- dt1[-11]
View(dt1)
dt1 <- dt1[-(18:23)]
View(dt1)
dt1 <- dt1[-(86)]
View(dt1)
grep("\\W", dt1$V2, perl=T)
grep("^[\\w\\.]", dt1$V2, perl=T)
grep("[^\\w\\.]", dt1$V2, perl=T)
dt1 <- dt1[-grep("[^\\w\\.]", dt1$V2, perl=T)]
dt1 <- read.csv("dt1.csv")
dt1 <- dt1[-c(1:12, 14, 17:24, 26:37, 39:48, 50:57, 59, 60, 61, 63, 64, 66:69, 74:77, 80:98)]
dt1 <- dt1[-11]
dt1 <- dt1[-(18:23)]
dt1 <- dt1[-(86)]
dt1a <- dt1[-grep("['^\\w\\.]", dt1$V2, perl=T)]
View(dt1a)
dt1 <- read.csv("dt1.csv")
dt1 <- dt1[-c(1:12, 14, 17:24, 26:37, 39:48, 50:57, 59, 60, 61, 63, 64, 66:69, 74:77, 80:98)]
dt1 <- dt1[-11]
dt1 <- dt1[-(18:23)]
dt1 <- read.csv("dt1.csv")
dt1 <- dt1[-c(1:12, 14, 17:24, 26:37, 39:48, 50:57, 59, 60, 61, 63, 64, 66:69, 74:77, 80:98)]
dt1 <- read.csv("dt1.csv")
library(data.table)
dt1 <- dt1[-c(1:12, 14, 17:24, 26:37, 39:48, 50:57, 59, 60, 61, 63, 64, 66:69, 74:77, 80:98)]
dt1 <- read.csv("dt1.csv")
dt1 <- as.data.table(read.csv("dt1.csv"))
is.data.table(dt3)
is.data.table(dt2)
is.data.table(dt4)
is.data.table(dts)
is.data.table(dt5)
is.data.table(dt1)
dt1 <- dt1[-c(1:12, 14, 17:24, 26:37, 39:48, 50:57, 59, 60, 61, 63, 64, 66:69, 74:77, 80:98)]
dt1 <- dt1[-11]
<- dt1[-(18:23)]
dt1 <- dt1[-(18:23)]
dt1 <- dt1[-(86)]
dt1a <- dt1[-grep("['^\\w\\.]", dt1$V2, perl=T)]
dt1a <- dt1[-grep("[^'\\w\\.]", dt1$V2, perl=T)]
dt1a[V1 == "i'm"]
dt1a[V2 == "i'm"]
dt1a[V2 == "I'm"]
dt1 <- dt1a
View(dt1)
dt1 <- dt1[2:3]
View(dt1)
dt1 <- dt1a[,2:3]
View(dt1)
t <- dt1[-which(dt1$V2 %in% wordpool)]
View(t)
names <- firstup(c(read_lines("historical_figures.txt"), read_lines("country_names.txt")))
d <- c(read_lines("dictionary_base.txt"),
names)
d <- c("Jordan", "Jackson", "Obama", "I")
d <- unique(d)
d <- c(read_lines("dictionary_base.txt"),
names)
d <- c(d, "Jordan", "Jackson", "Obama", "I")
d <- unique(d)
t <- dt1[-which(dt1$V2 %in% d)]
View(t)
t <- t[-which(t$V2 %in% wordpool)]
View(t)
rm(d, t)
rm(names)
rm(dt1a)
View(dts)
View(samples)
save.image("C:/R works/capstone_data_final.RData")
runApp('capstone')
runApp('capstone')
View(dt1)
target <- dt1$V2[edit_dist == 0]
runApp('capstone')
complete.word(a)
a <- "wor"
complete.word(a)
x <- "wor"
l <- unlist(strsplit(x, " "))
text <- l[length(l)]
t <- tolower(text)
edit_dist <- adist(t, dt1$V2)[1,]
min_edit_dist <- min(edit_dist, 2)
if (min_edit_dist == 0) {
target <- dt1$V2[edit_dist == 0]
a <- unique(na.omit(c(target, dt1[grep(paste("^", target, sep=""), dt1$V2)][order(-KN)]$V2[1:5])))
} else {
a <- c(na.omit(dt1[edit_dist <= min_edit_dist][order(-KN)]$V2[1:5]), t)
}
View(dt1)
is.data.table(dt1)
dt1a <- data.table(dt1)
View(dt1a)
dt1 <- dt1a
rm(dt1a)
dt1[edit_dist <= min_edit_dist]
dt1[edit_dist <= min_edit_dist][order(-KN)]
dt1[edit_dist <= min_edit_dist][order(-KN)]$V2[1:5]
na.omit(dt1[edit_dist <= min_edit_dist][order(-KN)]$V2[1:5])
na.omit(dt1[edit_dist <= min_edit_dist][order(-KN)]$V2[1:5])
>na.omit
?na.omit
a <- c(dt1[edit_dist <= min_edit_dist][order(-KN)]$V2[1:5], t)
dt1[edit_dist <= min_edit_dist][order(-KN)]$V2[1:5]
c(dt1[edit_dist <= min_edit_dist][order(-KN)]$V2[1:5], t)
dt1[edit_dist <= min_edit_dist][order(-KN)]$V2[1:5]
library(data.table)
dt1[edit_dist <= min_edit_dist]
dt1[edit_dist <= min_edit_dist][order(-KN)]
dt1[edit_dist <= min_edit_dist][order(-KN)]$V2
is.factor(dt1$KN)
dt1$V2 <- as.character(dt1$V2)
a <- c(dt1[edit_dist <= min_edit_dist][order(-KN)]$V2[1:5], t)
a <- a[!is.na(a)]
dt1[edit_dist <= min_edit_dist][order(-KN)]$V2[1:5]
install.packages("stringdist")
library(stringdist)
ed1 <- stringdist(t, dt1$V2)
library(microbenchmark)
microbenchmark(ed1 <- stringdist(t, dt1$V2))
microbenchmark(edit_dist <- adist(t, dt1$V2)[1,])
microbenchmark(edit_dist <- adist(t, dt1$V2)[1,])
microbenchmark(ed1 <- stringdist(t, dt1$V2))
microbenchmark(ed2 <- stringdistmatrix(t, dt1$V2))
edit_dist <- stringdist(t, dt1$V2)
rm(ed1. l, min_edit_dist, t, a, text, x, ed2)
rm(ed1, l, min_edit_dist, t, a, text, x, ed2)
rm(edit_dist)
runApp('capstone')
save.image("C:/R works/capstone_data_final.RData")
runApp('capstone')
is.factor(dt1$V2)
dt1$V2 <- as.character.default(dt1$V2)
is.factor(dt1$V2)
View(dt1)
is.factor(dt1$KN)
save.image("C:/R works/capstone_data_final.RData")
is.factor(dt2$V2)
is.factor(dt3$V2)
is.factor(dt4$V2)
is.factor(dt5$V2)
is.factor(dts$V2)
runApp('capstone')
dt2[V1 == "unk"]
x <- "contaminant"
x <- na.omit(unlist(strsplit(x, "(?<!Mr\\.|Mrs\\.|Dr\\.|Ms\\.|St\\.|Jr\\.|Ph\\.D\\.)(?<=[;!?\\.])[\"\']?\\s+(?=[A-Za-z$:;])", perl=T)))
x <- paste(" ", x[length(x)])
# 2. cleanse
x <- cleanse_input(x)
# 3. token - unlist input
t <- tokens(tolower(x), what = "word", remove_numbers = TRUE, remove_punct = TRUE,
remove_symbols = TRUE, remove_twitter = TRUE)
x <- t$text1; x[-which(x %in% wordpool)] <- "unk"
xs <- tokens_remove(t, sw, padding = FALSE)$text1; xs[-which(xs %in% wordpool)] <- "unk"
l <- length(x)
# input values by count
x5 <- paste(x[max((l-3),0):l], collapse = " ")
x4 <- paste(x[max((l-2),0):l], collapse = " ")
x3 <- paste(x[max((l-1),0):l], collapse = " ")
x2 <- x[l]
#xs1 <-xs[max(length(xs)-1,0)]
xs2 <-xs[max(length(xs)-2,0)]
# search table
r3 <- dt3[x3, on="V1"]
rs2 <- dts[xs2, on="V1"]
## core
rc <- r3[r3$V2 %in% rs2$V2][,2:3]
rc$KN <- rc$KN + rs2[V2 %in% rc$V2]$P
setorder(rc, -KN)
# rc$V2[1:5] # test
unique(na.omit(c(dt5[x5, on="V1"]$V2[1:3],
dt4[x4, on="V1"]$V2[1:4],
rc$V2[1:3],
r3[order(-KN)]$V2[1:5],
dt2[x2, on="V1"]$V2[1:5]))
)[1:5]
a <- unique(na.omit(c(dt5[x5, on="V1"]$V2[1:3],
dt4[x4, on="V1"]$V2[1:4],
rc$V2[1:3],
r3[order(-KN)]$V2[1:5],
dt2[x2, on="V1"]$V2[1:5]))
)[1:5]
is.na[a]
is.na(a)
if(sum(is.na(a)) == 5){ a <- dt2["unk", on="V1"]$V2[1:5] }
rm(r3, rc, rs2, t, a, l, x, x2, x3, x4, x5, xs, xs2)
runApp('capstone')
runApp('capstone')
runApp('capstone')
runApp('capstone')
edit_dist <- stringdist(t, dt1$V2)
runApp('capstone')
View(dt1)
dt1 <- dt1[-c(51710, 51711, 51715, 51717)]
View(dt1)
dt1 <- dt1[-c(30023, 20024)]
load("C:/R works/capstone_data_final.RData")
dt1 <- dt1[-c(51710, 51711, 51715, 51717)]
dt1 <- dt1[-c(30023, 30024)]
n <- c(read_lines("historical_figures.txt"), read_lines("country_names.txt"), read_lines("dictionary_base.txt"))
n <- unique(n)
n <- c(n, firstup(n))
d <- dt1[-which(dt1$V2 %in% n)]
View(d)
d <- d[-c(1:14)]
View(d)
write.csv(d, "d.csv")
runApp('capstone')
x <- "Ohhhhh #PointBreak is on tomorrow. Love that film and haven't seen it in quite some"
x <- na.omit(unlist(strsplit(x, "(?<!Mr\\.|Mrs\\.|Dr\\.|Ms\\.|St\\.|Jr\\.|Ph\\.D\\.)(?<=[;!?\\.])[\"\']?\\s+(?=[A-Za-z$:;])", perl=T)))
x <- paste(" ", x[length(x)])
x <- cleanse_input(x)
t <- tokens(tolower(x), what = "word", remove_numbers = TRUE, remove_punct = TRUE,
remove_symbols = TRUE, remove_twitter = TRUE)
x <- t$text1; x[-which(x %in% wordpool)] <- "unk"
xs <- tokens_remove(t, sw, padding = FALSE)$text1; xs[-which(xs %in% wordpool)] <- "unk"
l <- length(x)
x <- "Ohhhhh #PointBreak is on tomorrow. Love that film and haven't seen it in quite some"
t <- substr(x, nchar(x)-2, nchar(x))
runApp('capstone')
runApp('capstone')
t <-"."
rm(t)
runApp('capstone')
runApp('capstone')
runApp('capstone')
View(d)
rm(l)
save.image("C:/R works/capstone_temp.RData")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
author("capstone_slides")
install.packages("yaml")
install.packages("yaml")
library(slidify)
library(slidifyLibraries)
